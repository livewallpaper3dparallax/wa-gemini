  // Initialize WebSocket connection and event listeners
  useEffect(() => {
    // Set component as mounted
    isMounted.current = true;
    
    // Register component as active
    stateManager.registerComponent('inbox');
    
    // Connect to WebSocket
    websocketService.connect();
    
    // Set up event listeners
    websocketService.on('connection_status', (status) => {
      if (isMounted.current) {
        setWhatsappStatus(status);
        
        if (status === 'disconnected') {
          setShowQRCode(true);
        } else if (status === 'connected') {
          setShowQRCode(false);
          
          // Request inbox data when connected
          websocketService.requestInbox();
        }
      }
    });
    
    websocketService.on('inbox_data', (data) => {
      if (isMounted.current) {
        processInboxData(data);
      }
    });
    
    websocketService.on('new_message', (message) => {
      if (isMounted.current) {
        // Set new message flag
        setHasNewMessages(true);
        
        // Auto-clear the flag after 5 seconds
        setTimeout(() => {
          if (isMounted.current) {
            setHasNewMessages(false);
          }
        }, 5000);
        
        // Play notification sound
        try {
          const audio = new Audio('/notification.mp3');
          audio.play().catch(e => console.log('Could not play notification sound:', e));
        } catch (error) {
          console.log('Audio notification not supported');
        }
        
        // Request full inbox data to ensure we have the latest
        websocketService.requestInbox();
      }
    });
    
    websocketService.on('error', (error) => {
      console.error('WebSocket error:', error);
      if (isMounted.current) {
        setBackendStatus('offline');
        setError('Connection to server lost. Please check your internet connection.');
      }
    });
    
    // Initial request for inbox data
    websocketService.requestInbox();
    
    // Set up periodic requests for inbox data
    const refreshInterval = setInterval(() => {
      if (isMounted.current) {
        websocketService.requestInbox();
      }
    }, 10000); // Every 10 seconds
    
    // Cleanup function
    return () => {
      isMounted.current = false;
      stateManager.unregisterComponent('inbox');
      
      // Remove event listeners
      websocketService.off('connection_status', () => {});
      websocketService.off('inbox_data', () => {});
      websocketService.off('new_message', () => {});
      websocketService.off('error', () => {});
      
      // Clear intervals
      clearInterval(refreshInterval);
    };
  }, []);

  return (
    <ComponentCard
      title={viewMode === 'contacts' ? "WhatsApp Inbox" : `Chat with ${activeContact?.displayName}`}
    >
      {/* Header with status indicators and controls */}
      <div className="flex justify-between items-center mb-4">
        <div className="flex items-center flex-wrap gap-2">
          <button
            onClick={() => websocketService.requestInbox()}
            className="flex items-center justify-center rounded-md border border-brand-500 bg-brand-500 py-1.5 px-3 text-white hover:bg-brand-600 transition-colors text-sm"
          >
            <svg
              className="w-4 h-4 mr-1.5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
              ></path>
            </svg>
            Refresh
          </button>

          {loading && (
            <span className="text-xs text-gray-600 dark:text-gray-400 flex items-center">
              <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-brand-500 mr-1.5"></div>
              Refreshing...
            </span>
          )}

          {hasNewMessages && !loading && (
            <div className="px-2 py-0.5 bg-green-100 text-green-700 dark:bg-green-800 dark:text-green-200 rounded-full flex items-center animate-pulse text-xs">
              <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path d="M10 2a6 6 0 00-6 6v3.586l-.707.707A1 1 0 004 14h12a1 1 0 00.707-1.707L16 11.586V8a6 6 0 00-6-6zM10 18a3 3 0 01-3-3h6a3 3 0 01-3 3z"></path>
              </svg>
              New messages
            </div>
          )}

          {/* WhatsApp Status Indicator */}
          {whatsappStatus === 'disconnected' && (
            <div className="px-2 py-0.5 bg-orange-100 text-orange-700 dark:bg-orange-800/30 dark:text-orange-400 rounded-full flex items-center text-xs">
              <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd"></path>
              </svg>
              WhatsApp Disconnected
              <button
                onClick={handleReconnect}
                className="ml-1.5 underline text-orange-800 dark:text-orange-300"
              >
                Reconnect
              </button>
            </div>
          )}

          {whatsappStatus === 'connected' && (
            <div className="px-2 py-0.5 bg-green-100 text-green-700 dark:bg-green-800/30 dark:text-green-400 rounded-full flex items-center text-xs">
              <svg className="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"></path>
              </svg>
              WhatsApp Connected
            </div>
          )}

          <div className="text-xs text-gray-500 dark:text-gray-400">
            Updated: {lastRefreshTime}
          </div>
        </div>
      </div>

      {/* QR Code for reconnection */}
      {showQRCode && whatsappStatus === 'disconnected' && (
        <div className="mb-4 p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
          <h3 className="text-sm font-medium mb-2">Scan QR Code to Reconnect WhatsApp</h3>
          <QRCode onStatusChange={(status) => {
            if (status === 'connected') {
              setWhatsappStatus('connected');
              setShowQRCode(false);
              websocketService.requestInbox();
            }
          }} />
        </div>
      )}

      {/* Error message */}
      {error && (
        <div className="p-3 mb-4 bg-red-50 text-red-600 rounded-md dark:bg-red-500/10 dark:text-red-400 text-sm">
          <p>{error}</p>
          <button
            onClick={() => {
              setError(null);
              websocketService.requestInbox();
            }}
            className="mt-2 text-xs text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 underline"
          >
            Try again
          </button>
        </div>
      )}
    </ComponentCard>
  );
};

export default memo(EnhancedInboxTable);
